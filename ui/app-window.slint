export struct TileData {
    image: image,
    image_visible: bool,
    solved: bool,
}

component MemoryTile inherits Rectangle {
    callback clicked;
    in property <bool> open_curtain;
    in property <bool> solved;
    in property <image> icon;

    height: 64px;
    width: 64px;
    background: solved ? #34CE57 : #3960D5;
    animate  background {
         duration: 800ms;
    }

    Image {
        source: icon;
        width: parent.width * 0.8;
        height: parent.height * 0.8;
    }

    Rectangle {
        background: #193076;
        x: 0px;
        width: open_curtain ? 0px : (parent.width * 0.5);
        height: parent.height;
        animate width {
             duration: 250ms;
             easing: ease-in;
        }
    }

    Rectangle {
        background: #193076;
        x: open_curtain ? parent.width : (parent.width * 0.5);
        width: open_curtain ? 0px : (parent.width * 0.5);
        height: parent.height;
        animate width {
             duration: 250ms;
             easing: ease-in;
        }
        animate x {
             duration: 250ms;
             easing: ease-in;
        }
    }

    TouchArea {
        clicked => {
            root.clicked();
        }
    }
}

export component GameWindow inherits Rectangle {
    // 游戏窗口现在是一个组件，不再是顶级窗口
    
    callback check_if_pair_solved();
    callback play_match_sound();
    in property <bool> disable_tiles;


    in-out property <[TileData]> memory_tiles: [
        {image: @image-url("icons/fish.png")},
        {image: @image-url("icons/octopus.png")},
        {image: @image-url("icons/crab.png")},
        {image: @image-url("icons/jellyfish.png")},
        {image: @image-url("icons/starfish.png")},
        {image: @image-url("icons/turtle.png")},
        {image: @image-url("icons/whale.png")},
        {image: @image-url("icons/seahorse.png")},
    ];
    
    // 游戏区域容器
    Rectangle {
        background: #f0f0f0;
        border-radius: 10px;
        
        // 响应式布局 - 确保在各种屏幕尺寸下都能居中
        width: min(root.width * 0.9, 360px);
        height: min(root.height * 0.8, 360px);
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
        
        // 计算网格布局参数 - 确保网格在容器中居中
        property <length> available_space: min(self.width - 40px, self.height - 40px);
        property <length> grid_size: min(available_space, 280px);
        property <length> tile_size: grid_size / 4.5; // 留出间距
        property <length> tile_spacing: (grid_size - 4 * tile_size) / 3;
        property <length> grid_start_x: (self.width - grid_size) / 2;
        property <length> grid_start_y: (self.height - grid_size) / 2;
        
        for tile[i] in memory_tiles: MemoryTile {
            x: grid_start_x + mod(i, 4) * (tile_size + tile_spacing);
            y: grid_start_y + floor(i / 4) * (tile_size + tile_spacing);
            width: tile_size;
            height: tile_size;
            icon: tile.image;
            open_curtain: tile.image_visible || tile.solved;
            solved: tile.solved;
            clicked => {
                if (!root.disable_tiles) {
                    tile.image_visible = true;
                    root.check_if_pair_solved();
                }
            }
        }
    }
}

